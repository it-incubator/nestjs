version: '3.8' # Версия формата файла docker-compose. Версия 3.8 поддерживает большинство функций Docker Compose.

# Блок, который содержит общие параметры для нескольких сервисов. Его используют для того,
# чтобы не повторять один и тот же код в каждом разделе.
# &postgres-common — амперсанд означает, что создаётся "ссылка" (alias). Это позволяет
# в дальнейшем вставлять весь этот блок в другие части файла.
x-postgres-common:
  &postgres-common
  image: postgres:14-alpine # Образ Docker для PostgreSQL версии 14 на основе легковесной Alpine Linux.
  user: postgres # Указывает, что процесс в контейнере будет выполняться под системным пользователем postgres.
  restart: always # Контейнер будет перезапускаться автоматически в случае сбоя.

  # Проверка состояния контейнера.
  # Docker будет выполнять команду для проверки доступности базы данных. Если база не отвечает,
  # это будет считаться, что контейнер работает неправильно.
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres' # Команда для проверки доступности базы данных через команду pg_isready.
    interval: 10s # Интервал, через который выполняется проверка (каждые 10 секунд).
    timeout: 5s # Время ожидания выполнения команды проверки (если команда выполняется дольше 5 секунд, она считается неудачной).
    retries: 5 # Сколько раз Docker будет пытаться выполнить проверку, прежде чем пометит контейнер как "нездоровый".

services:
  # Определение основного сервиса (контейнера) с PostgreSQL.
  postgres_primary:
    <<: *postgres-common # Это вставка всех настроек из блока &postgres-common, описанного выше. Все параметры из этого блока будут применены к данному сервису.

    # Настройка портов. Контейнер PostgreSQL работает внутри Docker на стандартном порту 5432.
    # Порт 5433 на хосте (вашем компьютере) будет связан с портом 5432 внутри контейнера.
    # Это означает, что для подключения к базе данных на вашем компьютере вы будете использовать порт 5433.
    ports:
      - 5433:5432

    # Настройки среды (environment). Эти переменные используются для начальной настройки PostgreSQL.
    environment:
      POSTGRES_USER: user # Имя пользователя, который будет создан в базе данных PostgreSQL.
      POSTGRES_DB: postgres # Имя базы данных, которая будет создана.
      POSTGRES_PASSWORD: password # Пароль для пользователя, созданного выше.

      # Метод аутентификации, который будет использоваться для подключения к базе данных. SCRAM-SHA-256 - более безопасный метод хеширования паролей.
      # "host replication all 0.0.0.0/0 md5" — это настройка, которая разрешает аутентификацию по методу MD5 для репликации.
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"

      # Параметры, которые передаются в PostgreSQL при инициализации базы данных.
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"

    # Команда, которая будет выполнена при запуске контейнера PostgreSQL. Это настройка параметров сервера.
    # Включены возможности для репликации базы данных (сохранение и передача изменений на другие базы).
    command: |
      postgres 
      -c wal_level=replica # Указывает уровень ведения журнала WAL. "Replica" — позволяет реплицировать данные.
      -c hot_standby=on # Позволяет узлу оставаться в режиме ожидания для чтения, пока данные реплицируются.
      -c max_wal_senders=10 # Максимальное количество процессов, которые могут отправлять данные репликации.
      -c max_replication_slots=10 # Количество слотов для репликации. Это места для хранения информации о процессе репликации.
      -c hot_standby_feedback=on # Узел репликации может отправлять "обратную связь" на основной узел о полученных данных.

    # Монтируем файл SQL, который будет выполнен при первом запуске контейнера.
    # Этот файл может содержать начальные инструкции, например, создание таблиц или данных.
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  # Определение сервиса (контейнера) с репликой PostgreSQL.
  postgres_replica:
    <<: *postgres-common # Вставляем все параметры из блока &postgres-common, как и для основного сервиса.

    # Проброс портов для реплики. Порт 5434 на хосте связан с портом 5432 внутри контейнера реплики.
    # Для подключения к реплике на хосте нужно использовать порт 5434.
    ports:
      - 5434:5432

    # Переменные окружения для реплики. Эти параметры относятся к репликации базы данных.
    environment:
      PGUSER: replicator # Пользователь, который будет использоваться для выполнения репликации.
      PGPASSWORD: replicator_password # Пароль для пользователя репликации.

    # Команда, которая выполняется для запуска реплики PostgreSQL.
    command: |
      bash -c "
      # Скрипт будет пытаться подключиться к основному серверу PostgreSQL, пока не выполнится успешная репликация.
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...' # Выводит сообщение, если репликация ещё не началась.
      sleep 1s # Ждёт 1 секунду, перед тем как повторить попытку подключения.
      done
      echo 'Backup done, starting replica...' # Когда бэкап данных основного сервера завершён, выводится сообщение.
      chmod 0700 /var/lib/postgresql/data # Устанавливаем правильные права доступа на папку с данными реплики.
      postgres # Запускаем сервер реплики.
      "

    # Зависимости. Этот блок указывает, что контейнер реплики должен запуститься после запуска основного контейнера.
    depends_on:
      - postgres_primary
